package com.galleryapp.data.provider;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import com.galleryapp.data.provider.util.ColumnMetadata;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p/>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class GalleryDBContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + GalleryDBProvider.AUTHORITY);

    private GalleryDBContent() {
    }

    /**
     * Created in version 1
     */
    public static final class GalleryImages extends GalleryDBContent {

        private static final String LOG_TAG = GalleryImages.class.getSimpleName();

        public static final String TABLE_NAME = "galleryImages";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/gallerydb-galleryimages";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/gallerydb-galleryimages";

        public static final Uri CONTENT_URI = Uri.parse(GalleryDBContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            IMAGE_NAME("imageName", "text"),
            IMAGE_PATH("imagePath", "text"),
            THUMB_PATH("thumbPath", "text"),
            IMAGE_TITLE("imageTitle", "text"),
            IMAGE_NOTES("imageNotes", "text"),
            CREATE_DATE("createDate", "text"),
            IS_SYNCED("isSynced", "integer"),
            STATUS("status", "text"),
            NEED_UPLOAD("needUpload", "integer"),
            FILE_URI("fileUri", "text"),
            FILE_ID("fileId", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.IMAGE_NAME.getName(),
                Columns.IMAGE_PATH.getName(),
                Columns.THUMB_PATH.getName(),
                Columns.IMAGE_TITLE.getName(),
                Columns.IMAGE_NOTES.getName(),
                Columns.CREATE_DATE.getName(),
                Columns.IS_SYNCED.getName(),
                Columns.STATUS.getName(),
                Columns.NEED_UPLOAD.getName(),
                Columns.FILE_URI.getName(),
                Columns.FILE_ID.getName()
        };

        private GalleryImages() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "GalleryImages | createTable start");
            }

            StringBuilder sb = new StringBuilder();
            Columns[] columnses = Columns.values();
            int columnsCount = columnses.length;
            for (Columns column : columnses) {
                if (column.getIndex() == 0) {
                    sb.append("CREATE TABLE ").append(TABLE_NAME).append(" (")
                            .append(column.getName()).append(" ").append(column.getType()).append(", ");
                } else if (column.getIndex() == (columnsCount - 1)) {
                    sb.append(column.getName()).append(" ").append(column.getType()).append(", PRIMARY KEY (")
                            .append(Columns.ID.getName()).append(")").append(");");
                } else {
                    sb.append(column.getName()).append(" ").append(column.getType()).append(", ");
                }
            }
            db.execSQL(sb.toString());
            for (Columns column : columnses) {
                if (column.getIndex() != 0) {
                    db.execSQL("CREATE INDEX galleryImages_" + column.getName() + " on " + TABLE_NAME + "(" + column.getName() + ");");
                }
            }

            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "GalleryImages | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "GalleryImages | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "GalleryImages | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            StringBuilder sb = new StringBuilder();
            Columns[] columns = Columns.values();
            int columnCount = columns.length;
            for (Columns column : columns) {
                if (column.getIndex() == 0) {
                    sb.append("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(column.getName()).append(", ");
                } else if (column.getIndex() == (columnCount - 1)) {
                    sb.append(column.getName()).append(" ) VALUES (");
                    for (Columns col : columns) {
                        if (col.getIndex() != (columnCount - 1)) {
                            sb.append("?").append(", ");
                        } else {
                            sb.append("?");
                        }
                    }
                    sb.append(")");
                } else {
                    sb.append(column.getName()).append(", ");
                }
            }
            return sb.toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            Columns[] columns = Columns.values();
            for (Columns column : columns) {
                if (column.getType().intern().equals("text")) {
                    value = values.getAsString(column.getName());
                    stmt.bindString(i++, value != null ? value : "");
                } else {
                    stmt.bindLong(i++, values.getAsLong(column.getName()));
                }
            }
        }
    }

    /**
     * Created in version 1
     */
    public static final class Channels extends GalleryDBContent {

        private static final String LOG_TAG = Channels.class.getSimpleName();

        public static final String TABLE_NAME = "channels";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/gallerydb-channels";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/gallerydb-channels";

        public static final Uri CONTENT_URI = Uri.parse(GalleryDBContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CODE("code", "text"),
            DOMAIN("domain", "text"),
            NAME("name", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.CODE.getName(),
                Columns.DOMAIN.getName(),
                Columns.NAME.getName()
        };

        private Channels() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Channels | createTable start");
            }

            StringBuilder sb = new StringBuilder();
            Columns[] columnses = Columns.values();
            int columnsCount = columnses.length;
            for (Columns column : columnses) {
                if (column.getIndex() == 0) {
                    sb.append("CREATE TABLE ").append(TABLE_NAME).append(" (")
                            .append(column.getName()).append(" ").append(column.getType()).append(", ");
                } else if (column.getIndex() == (columnsCount - 1)) {
                    sb.append(column.getName()).append(" ").append(column.getType()).append(", PRIMARY KEY (")
                            .append(Columns.ID.getName()).append(")").append(");");
                } else {
                    sb.append(column.getName()).append(" ").append(column.getType()).append(", ");
                }
            }
            db.execSQL(sb.toString());
            for (Columns column : columnses) {
                if (column.getIndex() != 0) {
                    db.execSQL("CREATE INDEX channels_" + column.getName() + " on " + TABLE_NAME + "(" + column.getName() + ");");
                }
            }

            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Channels | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Channels | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Channels | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            StringBuilder sb = new StringBuilder();
            Columns[] columns = Columns.values();
            int columnCount = columns.length;
            for (Columns column : columns) {
                if (column.getIndex() == 0) {
                    sb.append("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(column.getName()).append(", ");
                } else if (column.getIndex() == (columnCount - 1)) {
                    sb.append(column.getName()).append(" ) VALUES (");
                    for (Columns col : columns) {
                        if (col.getIndex() != (columnCount - 1)) {
                            sb.append("?").append(", ");
                        } else {
                            sb.append("?");
                        }
                    }
                    sb.append(")");
                } else {
                    sb.append(column.getName()).append(", ");
                }
            }
            return sb.toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            Columns[] columns = Columns.values();
            for (Columns column : columns) {
                if (column.getType().intern().equals("text")) {
                    value = values.getAsString(column.getName());
                    stmt.bindString(i++, value != null ? value : "");
                } else {
                    stmt.bindLong(i++, values.getAsLong(column.getName()));
                }
            }
        }
    }

    /**
     * Created in version 1
     */
    public static final class IndexSchemas extends GalleryDBContent {

        private static final String LOG_TAG = IndexSchemas.class.getSimpleName();

        public static final String TABLE_NAME = "indexschema";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/gallerydb-indexschema";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/gallerydb-indexschema";

        public static final Uri CONTENT_URI = Uri.parse(GalleryDBContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CHANNCODE("chanCode", "text"),
            TYPE("type", "text"),
            URI("uri", "text"),
            DATAROOT("dataRoot", "text"),
            VALUEFIELD("valueField", "text"),
            DISPLAYFIELD("displayField", "text"),
            VALUEFIELDNAME("valueFieldName", "text"),
            DISPLAYFIELDNAME("displayFieldName", "text"),
            ADDNEWALLOWED("addNewAllowed", "integer"),
            RULECODE("ruleCode", "text"),
            CODE("code", "text"),
            NAME("name", "text"),
            DESCRIPTION("description", "text"),
            PARAMETERNAME("parameterName", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.TYPE.getName(),
                Columns.URI.getName(),
                Columns.DATAROOT.getName(),
                Columns.VALUEFIELD.getName(),
                Columns.DISPLAYFIELD.getName(),
                Columns.VALUEFIELDNAME.getName(),
                Columns.DISPLAYFIELDNAME.getName(),
                Columns.ADDNEWALLOWED.getName(),
                Columns.RULECODE.getName(),
                Columns.CODE.getName(),
                Columns.NAME.getName(),
                Columns.DESCRIPTION.getName(),
                Columns.PARAMETERNAME.getName()
        };

        private IndexSchemas() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "IndexSchema | createTable start");
            }
            StringBuilder sb = new StringBuilder();
            Columns[] columnses = Columns.values();
            int columnsCount = columnses.length;
            for (Columns column : columnses) {
                if (column.getIndex() == 0) {
                    sb.append("CREATE TABLE ").append(TABLE_NAME).append(" (")
                            .append(column.getName()).append(" ").append(column.getType()).append(", ");
                } else if (column.getIndex() == (columnsCount - 1)) {
                    sb.append(column.getName()).append(" ").append(column.getType()).append(", PRIMARY KEY (")
                            .append(Columns.ID.getName()).append(")").append(");");
                } else {
                    sb.append(column.getName()).append(" ").append(column.getType()).append(", ");
                }
            }
            db.execSQL(sb.toString());
            for (Columns column : columnses) {
                if (column.getIndex() != 0) {
                    db.execSQL("CREATE INDEX indexSchema_" + column.getName() + " on " + TABLE_NAME + "(" + column.getName() + ");");
                }
            }
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "IndexSchema | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "IndexSchema | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (GalleryDBProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "IndexSchema | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            StringBuilder sb = new StringBuilder();
            Columns[] columns = Columns.values();
            int columnCount = columns.length;
            for (Columns column : columns) {
                if (column.getIndex() == 0) {
                    sb.append("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(column.getName()).append(", ");
                } else if (column.getIndex() == (columnCount - 1)) {
                    sb.append(column.getName()).append(" ) VALUES (");
                    for (Columns col : columns) {
                        if (col.getIndex() != (columnCount - 1)) {
                            sb.append("?").append(", ");
                        } else {
                            sb.append("?");
                        }
                    }
                    sb.append(")");
                } else {
                    sb.append(column.getName()).append(", ");
                }
            }
            return sb.toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            Columns[] columns = Columns.values();
            for (Columns column : columns) {
                if (column.getType().intern().equals("text")) {
                    value = values.getAsString(column.getName());
                    stmt.bindString(i++, value != null ? value : "");
                } else {
                    stmt.bindLong(i++, values.getAsLong(column.getName()));
                }
            }
        }
    }
}

