apply plugin: 'com.android.application'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 20
        versionCode 1
        versionName '1.0.9'
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }
    lintOptions {
        // simple xml fails lint checks because it references javax.xml.stream
        abortOnError false
    }
    productFlavors {
    }
    signingConfigs {
        release {
            storeFile file('keystore.jks')
            storePassword '123456'
            keyAlias 'scanapp'
            keyPassword '123456'
        }
        debug {
            storeFile file('keystore.jks')
            storePassword '123456'
            keyAlias 'scanapp'
            keyPassword '123456'
        }
    }
    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            signingConfig signingConfigs.release
            zipAlign true
            debuggable false
            jniDebugBuild false
            renderscriptDebugBuild false
        }
        debug {
            debuggable true
            jniDebugBuild true
            signingConfig signingConfigs.debug
        }
    }
    dexOptions {
        jumboMode = true
        preDexLibraries = false
//        incremental true
//        javaMaxHeapSize "2g"
    }
}

dependencies {
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.1'
    //    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Google Play Services
    //    compile 'com.google.android.gms:play-services:5.2.08'
    // Support Libraries
    //    compile 'com.squareup.okhttp:okhttp:1.5.4'
    compile 'com.google.guava:guava:17.0'
//    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'com.google.code.gson:gson:2.3'
//    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile files('libs/android-support-v4.jar')
}

/*def toCamelCase(String string) {
    String result = ""
    string.findAll("[^\\W]+") { String word ->
        result += word.capitalize()
    }
    return result
}*/

/*afterEvaluate { project ->
    Configuration runtimeConfiguration = project.configurations.getByName('compile')
    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
    // Forces resolve of configuration
    ModuleVersionIdentifier module = resolution.getAllComponents().find { it.moduleVersion.name.equals("play-services") }.moduleVersion

    String prepareTaskName = "prepare${toCamelCase("${module.group} ${module.name} ${module.version}")}Library"
    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir

    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
        inputs.files new File(playServiceRootFolder, "classes.jar")
        outputs.dir playServiceRootFolder
        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'

        doLast {
            copy {
                from(file(new File(playServiceRootFolder, "classes.jar")))
                into(file(playServiceRootFolder))
                rename { fileName ->
                    fileName = "classes_orig.jar"
                }
            }
            tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
                destinationDir = playServiceRootFolder
                archiveName = "classes.jar"
                from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
                    exclude "com/google/ads*//**"
 exclude "com/google/android/gms/analytics*//**"
 exclude "com/google/android/gms/games*//**"
 exclude "com/google/android/gms/maps*//**"
 exclude "com/google/android/gms/panorama*//**"
 exclude "com/google/android/gms/plus*//**"
 exclude "com/google/android/gms/drive*//**"
 exclude "com/google/android/gms/wallet*//**"
 exclude "com/google/android/gms/wearable*//**"
 }
 }.execute()
 delete {delete (file(new File(playServiceRootFolder, "classes_orig.jar")))}}
 }

 project.tasks.findAll { it.name.startsWith('prepare') && it.name.endsWith('Dependencies') }.each { Task task ->
 task.dependsOn stripPlayServices}}*/
