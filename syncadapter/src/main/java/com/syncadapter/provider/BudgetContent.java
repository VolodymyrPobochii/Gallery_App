package com.syncadapter.provider;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import com.syncadapter.provider.util.ColumnMetadata;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p/>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class BudgetContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + BudgetProvider.AUTHORITY);

    private BudgetContent() {
    }

    /**
     * Created in version 1
     */
    public static final class DailyCategoryEntry extends BudgetContent {

        private static final String LOG_TAG = DailyCategoryEntry.class.getSimpleName();

        public static final String TABLE_NAME = "dailyCategoryEntry";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-dailycategoryentry";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-dailycategoryentry";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ENTRY_TYPE("entryType", "text"),
            CATEGORY("category", "text"),
            CURRENCY("currency", "text"),
            SUM("sum", "text"),
            DATE_DAY("dateDay", "text"),
            DATE_MONTH("dateMonth", "text"),
            DATE_YEAR("dateYear", "text"),
            TIME("time", "text"),
            LAST_UPDATE("lastUpdate", "text"),
            DESCRIPTION("description", "text"),
            COMMENTS("comments", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.ENTRY_TYPE.getName(),
                Columns.CATEGORY.getName(),
                Columns.CURRENCY.getName(),
                Columns.SUM.getName(),
                Columns.DATE_DAY.getName(),
                Columns.DATE_MONTH.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.TIME.getName(),
                Columns.LAST_UPDATE.getName(),
                Columns.DESCRIPTION.getName(),
                Columns.COMMENTS.getName(),
                Columns.IS_SYNCED.getName()
        };

        private DailyCategoryEntry() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
                    Columns.ID.getName() + " " + Columns.ID.getType() + ", " +
                    Columns.ENTRY_TYPE.getName() + " " + Columns.ENTRY_TYPE.getType() + ", " +
                    Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " +
                    Columns.CURRENCY.getName() + " " + Columns.CURRENCY.getType() + ", " +
                    Columns.SUM.getName() + " " + Columns.SUM.getType() + ", " +
                    Columns.DATE_DAY.getName() + " " + Columns.DATE_DAY.getType() + ", " +
                    Columns.DATE_MONTH.getName() + " " + Columns.DATE_MONTH.getType() + ", " +
                    Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", " +
                    Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " +
                    Columns.LAST_UPDATE.getName() + " " + Columns.LAST_UPDATE.getType() + ", " +
                    Columns.DESCRIPTION.getName() + " " + Columns.DESCRIPTION.getType() + ", " +
                    Columns.COMMENTS.getName() + " " + Columns.COMMENTS.getType() + ", " +
                    Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX dailyCategoryEntry_entryType on " + TABLE_NAME + "(" + Columns.ENTRY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_category on " + TABLE_NAME + "(" + Columns.CATEGORY.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_currency on " + TABLE_NAME + "(" + Columns.CURRENCY.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_sum on " + TABLE_NAME + "(" + Columns.SUM.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_dateDay on " + TABLE_NAME + "(" + Columns.DATE_DAY.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_dateMonth on " + TABLE_NAME + "(" + Columns.DATE_MONTH.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_time on " + TABLE_NAME + "(" + Columns.TIME.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_lastUpdate on " + TABLE_NAME + "(" + Columns.LAST_UPDATE.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_description on " + TABLE_NAME + "(" + Columns.DESCRIPTION.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_comments on " + TABLE_NAME + "(" + Columns.COMMENTS.getName() + ");");
            db.execSQL("CREATE INDEX dailyCategoryEntry_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.ENTRY_TYPE.getName()).append(", ")
                    .append(Columns.CATEGORY.getName()).append(", ")
                    .append(Columns.CURRENCY.getName()).append(", ")
                    .append(Columns.SUM.getName()).append(", ")
                    .append(Columns.DATE_DAY.getName()).append(", ")
                    .append(Columns.DATE_MONTH.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.TIME.getName()).append(", ")
                    .append(Columns.LAST_UPDATE.getName()).append(", ")
                    .append(Columns.DESCRIPTION.getName()).append(", ")
                    .append(Columns.COMMENTS.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.ENTRY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CURRENCY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_DAY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_MONTH.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_UPDATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESCRIPTION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COMMENTS.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class MonthlyCategoryEntry extends BudgetContent {

        private static final String LOG_TAG = MonthlyCategoryEntry.class.getSimpleName();

        public static final String TABLE_NAME = "monthlyCategoryEntry";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-monthlycategoryentry";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-monthlycategoryentry";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ENTRY_TYPE("entryType", "text"),
            CATEGORY("category", "text"),
            CURRENCY("currency", "text"),
            SUM("sum", "text"),
            DATE_MONTH("dateMonth", "text"),
            DATE_YEAR("dateYear", "text"),
            TIME("time", "text"),
            LAST_UPDATE("lastUpdate", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.ENTRY_TYPE.getName(),
                Columns.CATEGORY.getName(),
                Columns.CURRENCY.getName(),
                Columns.SUM.getName(),
                Columns.DATE_MONTH.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.TIME.getName(),
                Columns.LAST_UPDATE.getName(),
                Columns.IS_SYNCED.getName()
        };

        private MonthlyCategoryEntry() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
                    Columns.ID.getName() + " " + Columns.ID.getType() + ", " +
                    Columns.ENTRY_TYPE.getName() + " " + Columns.ENTRY_TYPE.getType() + ", " +
                    Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " +
                    Columns.CURRENCY.getName() + " " + Columns.CURRENCY.getType() + ", " +
                    Columns.SUM.getName() + " " + Columns.SUM.getType() + ", " +
                    Columns.DATE_MONTH.getName() + " " + Columns.DATE_MONTH.getType() + ", " +
                    Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", " +
                    Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " +
                    Columns.LAST_UPDATE.getName() + " " + Columns.LAST_UPDATE.getType() + ", " +
                    Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX monthlyCategoryEntry_entryType on " + TABLE_NAME + "(" + Columns.ENTRY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_category on " + TABLE_NAME + "(" + Columns.CATEGORY.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_currency on " + TABLE_NAME + "(" + Columns.CURRENCY.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_sum on " + TABLE_NAME + "(" + Columns.SUM.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_dateMonth on " + TABLE_NAME + "(" + Columns.DATE_MONTH.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_time on " + TABLE_NAME + "(" + Columns.TIME.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_lastUpdate on " + TABLE_NAME + "(" + Columns.LAST_UPDATE.getName() + ");");
            db.execSQL("CREATE INDEX monthlyCategoryEntry_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.ENTRY_TYPE.getName()).append(", ")
                    .append(Columns.CATEGORY.getName()).append(", ")
                    .append(Columns.CURRENCY.getName()).append(", ")
                    .append(Columns.SUM.getName()).append(", ")
                    .append(Columns.DATE_MONTH.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.TIME.getName()).append(", ")
                    .append(Columns.LAST_UPDATE.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.ENTRY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CURRENCY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_MONTH.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_UPDATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class YearlyCategoryEntry extends BudgetContent {

        private static final String LOG_TAG = YearlyCategoryEntry.class.getSimpleName();

        public static final String TABLE_NAME = "yearlyCategoryEntry";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-yearlycategoryentry";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-yearlycategoryentry";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ENTRY_TYPE("entryType", "text"),
            CATEGORY("category", "text"),
            CURRENCY("currency", "text"),
            SUM("sum", "text"),
            DATE_YEAR("dateYear", "text"),
            TIME("time", "text"),
            LAST_UPDATE("lastUpdate", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.ENTRY_TYPE.getName(),
                Columns.CATEGORY.getName(),
                Columns.CURRENCY.getName(),
                Columns.SUM.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.TIME.getName(),
                Columns.LAST_UPDATE.getName(),
                Columns.IS_SYNCED.getName()
        };

        private YearlyCategoryEntry() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
                    Columns.ID.getName() + " " + Columns.ID.getType() + ", " +
                    Columns.ENTRY_TYPE.getName() + " " + Columns.ENTRY_TYPE.getType() + ", " +
                    Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " +
                    Columns.CURRENCY.getName() + " " + Columns.CURRENCY.getType() + ", " +
                    Columns.SUM.getName() + " " + Columns.SUM.getType() + ", " +
                    Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", " +
                    Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " +
                    Columns.LAST_UPDATE.getName() + " " + Columns.LAST_UPDATE.getType() + ", " +
                    Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX yearlyCategoryEntry_entryType on " + TABLE_NAME + "(" + Columns.ENTRY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_category on " + TABLE_NAME + "(" + Columns.CATEGORY.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_currency on " + TABLE_NAME + "(" + Columns.CURRENCY.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_sum on " + TABLE_NAME + "(" + Columns.SUM.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_time on " + TABLE_NAME + "(" + Columns.TIME.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_lastUpdate on " + TABLE_NAME + "(" + Columns.LAST_UPDATE.getName() + ");");
            db.execSQL("CREATE INDEX yearlyCategoryEntry_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.ENTRY_TYPE.getName()).append(", ")
                    .append(Columns.CATEGORY.getName()).append(", ")
                    .append(Columns.CURRENCY.getName()).append(", ")
                    .append(Columns.SUM.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.TIME.getName()).append(", ")
                    .append(Columns.LAST_UPDATE.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.ENTRY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CURRENCY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_UPDATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class DailyEntry extends BudgetContent {

        private static final String LOG_TAG = DailyEntry.class.getSimpleName();

        public static final String TABLE_NAME = "dailyEntry";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-dailyentry";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-dailyentry";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ENTRY_TYPE("entryType", "text"),
            CATEGORY("category", "text"),
            CURRENCY("currency", "text"),
            SUM("sum", "text"),
            DATE_DAY("dateDay", "text"),
            DATE_MONTH("dateMonth", "text"),
            DATE_YEAR("dateYear", "text"),
            TIME("time", "text"),
            LAST_UPDATE("lastUpdate", "text"),
            DESCRIPTION("description", "text"),
            COMMENTS("comments", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.ENTRY_TYPE.getName(),
                Columns.CATEGORY.getName(),
                Columns.CURRENCY.getName(),
                Columns.SUM.getName(),
                Columns.DATE_DAY.getName(),
                Columns.DATE_MONTH.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.TIME.getName(),
                Columns.LAST_UPDATE.getName(),
                Columns.DESCRIPTION.getName(),
                Columns.COMMENTS.getName(),
                Columns.IS_SYNCED.getName()
        };

        private DailyEntry() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
                    Columns.ID.getName() + " " + Columns.ID.getType() + ", " +
                    Columns.ENTRY_TYPE.getName() + " " + Columns.ENTRY_TYPE.getType() + ", " +
                    Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " +
                    Columns.CURRENCY.getName() + " " + Columns.CURRENCY.getType() + ", " +
                    Columns.SUM.getName() + " " + Columns.SUM.getType() + ", " +
                    Columns.DATE_DAY.getName() + " " + Columns.DATE_DAY.getType() + ", " +
                    Columns.DATE_MONTH.getName() + " " + Columns.DATE_MONTH.getType() + ", " +
                    Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", " +
                    Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " +
                    Columns.LAST_UPDATE.getName() + " " + Columns.LAST_UPDATE.getType() + ", " +
                    Columns.DESCRIPTION.getName() + " " + Columns.DESCRIPTION.getType() + ", " +
                    Columns.COMMENTS.getName() + " " + Columns.COMMENTS.getType() + ", " +
                    Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX dailyEntry_entryType on " + TABLE_NAME + "(" + Columns.ENTRY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_category on " + TABLE_NAME + "(" + Columns.CATEGORY.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_currency on " + TABLE_NAME + "(" + Columns.CURRENCY.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_sum on " + TABLE_NAME + "(" + Columns.SUM.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_dateDay on " + TABLE_NAME + "(" + Columns.DATE_DAY.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_dateMonth on " + TABLE_NAME + "(" + Columns.DATE_MONTH.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_time on " + TABLE_NAME + "(" + Columns.TIME.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_lastUpdate on " + TABLE_NAME + "(" + Columns.LAST_UPDATE.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_description on " + TABLE_NAME + "(" + Columns.DESCRIPTION.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_comments on " + TABLE_NAME + "(" + Columns.COMMENTS.getName() + ");");
            db.execSQL("CREATE INDEX dailyEntry_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DailyEntry | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.ENTRY_TYPE.getName()).append(", ")
                    .append(Columns.CATEGORY.getName()).append(", ")
                    .append(Columns.CURRENCY.getName()).append(", ")
                    .append(Columns.SUM.getName()).append(", ")
                    .append(Columns.DATE_DAY.getName()).append(", ")
                    .append(Columns.DATE_MONTH.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.TIME.getName()).append(", ")
                    .append(Columns.LAST_UPDATE.getName()).append(", ")
                    .append(Columns.DESCRIPTION.getName()).append(", ")
                    .append(Columns.COMMENTS.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.ENTRY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CURRENCY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_DAY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_MONTH.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_UPDATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESCRIPTION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.COMMENTS.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class MonthlyEntry extends BudgetContent {

        private static final String LOG_TAG = MonthlyEntry.class.getSimpleName();

        public static final String TABLE_NAME = "monthlyEntry";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-monthlyentry";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-monthlyentry";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ENTRY_TYPE("entryType", "text"),
            CATEGORY("category", "text"),
            CURRENCY("currency", "text"),
            SUM("sum", "text"),
            DATE_MONTH("dateMonth", "text"),
            DATE_YEAR("dateYear", "text"),
            TIME("time", "text"),
            LAST_UPDATE("lastUpdate", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.ENTRY_TYPE.getName(),
                Columns.CATEGORY.getName(),
                Columns.CURRENCY.getName(),
                Columns.SUM.getName(),
                Columns.DATE_MONTH.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.TIME.getName(),
                Columns.LAST_UPDATE.getName(),
                Columns.IS_SYNCED.getName()
        };

        private MonthlyEntry() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
                    Columns.ID.getName() + " " + Columns.ID.getType() + ", " +
                    Columns.ENTRY_TYPE.getName() + " " + Columns.ENTRY_TYPE.getType() + ", " +
                    Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " +
                    Columns.CURRENCY.getName() + " " + Columns.CURRENCY.getType() + ", " +
                    Columns.SUM.getName() + " " + Columns.SUM.getType() + ", " +
                    Columns.DATE_MONTH.getName() + " " + Columns.DATE_MONTH.getType() + ", " +
                    Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", " +
                    Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " +
                    Columns.LAST_UPDATE.getName() + " " + Columns.LAST_UPDATE.getType() + ", " +
                    Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX monthlyEntry_entryType on " + TABLE_NAME + "(" + Columns.ENTRY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_category on " + TABLE_NAME + "(" + Columns.CATEGORY.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_currency on " + TABLE_NAME + "(" + Columns.CURRENCY.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_sum on " + TABLE_NAME + "(" + Columns.SUM.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_dateMonth on " + TABLE_NAME + "(" + Columns.DATE_MONTH.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_time on " + TABLE_NAME + "(" + Columns.TIME.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_lastUpdate on " + TABLE_NAME + "(" + Columns.LAST_UPDATE.getName() + ");");
            db.execSQL("CREATE INDEX monthlyEntry_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "MonthlyEntry | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.ENTRY_TYPE.getName()).append(", ")
                    .append(Columns.CATEGORY.getName()).append(", ")
                    .append(Columns.CURRENCY.getName()).append(", ")
                    .append(Columns.SUM.getName()).append(", ")
                    .append(Columns.DATE_MONTH.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.TIME.getName()).append(", ")
                    .append(Columns.LAST_UPDATE.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.ENTRY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CURRENCY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_MONTH.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_UPDATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class YearlyEntry extends BudgetContent {

        private static final String LOG_TAG = YearlyEntry.class.getSimpleName();

        public static final String TABLE_NAME = "yearlyEntry";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-yearlyentry";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-yearlyentry";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            ENTRY_TYPE("entryType", "text"),
            CATEGORY("category", "text"),
            CURRENCY("currency", "text"),
            SUM("sum", "text"),
            DATE_YEAR("dateYear", "text"),
            TIME("time", "text"),
            LAST_UPDATE("lastUpdate", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.ENTRY_TYPE.getName(),
                Columns.CATEGORY.getName(),
                Columns.CURRENCY.getName(),
                Columns.SUM.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.TIME.getName(),
                Columns.LAST_UPDATE.getName(),
                Columns.IS_SYNCED.getName()
        };

        private YearlyEntry() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
                    Columns.ID.getName() + " " + Columns.ID.getType() + ", " +
                    Columns.ENTRY_TYPE.getName() + " " + Columns.ENTRY_TYPE.getType() + ", " +
                    Columns.CATEGORY.getName() + " " + Columns.CATEGORY.getType() + ", " +
                    Columns.CURRENCY.getName() + " " + Columns.CURRENCY.getType() + ", " +
                    Columns.SUM.getName() + " " + Columns.SUM.getType() + ", " +
                    Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", " +
                    Columns.TIME.getName() + " " + Columns.TIME.getType() + ", " +
                    Columns.LAST_UPDATE.getName() + " " + Columns.LAST_UPDATE.getType() + ", " +
                    Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX yearlyEntry_entryType on " + TABLE_NAME + "(" + Columns.ENTRY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_category on " + TABLE_NAME + "(" + Columns.CATEGORY.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_currency on " + TABLE_NAME + "(" + Columns.CURRENCY.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_sum on " + TABLE_NAME + "(" + Columns.SUM.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_time on " + TABLE_NAME + "(" + Columns.TIME.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_lastUpdate on " + TABLE_NAME + "(" + Columns.LAST_UPDATE.getName() + ");");
            db.execSQL("CREATE INDEX yearlyEntry_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "YearlyEntry | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.ENTRY_TYPE.getName()).append(", ")
                    .append(Columns.CATEGORY.getName()).append(", ")
                    .append(Columns.CURRENCY.getName()).append(", ")
                    .append(Columns.SUM.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.TIME.getName()).append(", ")
                    .append(Columns.LAST_UPDATE.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.ENTRY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CURRENCY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUM.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAST_UPDATE.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class Category extends BudgetContent {

        private static final String LOG_TAG = Category.class.getSimpleName();

        public static final String TABLE_NAME = "category";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-category";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-category";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            CATEGORY_TYPE("categoryType", "text"),
            CATEGORY_NAME("categoryName", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.CATEGORY_TYPE.getName(),
                Columns.CATEGORY_NAME.getName()
        };

        private Category() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Category | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + ", " + Columns.CATEGORY_TYPE.getName() + " " + Columns.CATEGORY_TYPE.getType() + ", " + Columns.CATEGORY_NAME.getName() + " " + Columns.CATEGORY_NAME.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX category_categoryType on " + TABLE_NAME + "(" + Columns.CATEGORY_TYPE.getName() + ");");
            db.execSQL("CREATE INDEX category_categoryName on " + TABLE_NAME + "(" + Columns.CATEGORY_NAME.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Category | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Category | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Category | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.CATEGORY_TYPE.getName()).append(", ").append(Columns.CATEGORY_NAME.getName()).append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.CATEGORY_TYPE.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.CATEGORY_NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }

    /**
     * Created in version 1
     */
    public static final class Dates extends BudgetContent {

        private static final String LOG_TAG = Dates.class.getSimpleName();

        public static final String TABLE_NAME = "dates";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-dates";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-dates";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            DATE_DAY("dateDay", "text"),
            DATE_MONTH("dateMonth", "text"),
            DATE_YEAR("dateYear", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.DATE_DAY.getName(),
                Columns.DATE_MONTH.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.IS_SYNCED.getName()
        };

        private Dates() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Dates | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
                    + Columns.ID.getName() + " " + Columns.ID.getType() + ", "
                    + Columns.DATE_DAY.getName() + " " + Columns.DATE_DAY.getType() + ", "
                    + Columns.DATE_MONTH.getName() + " " + Columns.DATE_MONTH.getType() + ", "
                    + Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", "
                    + Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX dates_dateDay on " + TABLE_NAME + "(" + Columns.DATE_DAY.getName() + ");");
            db.execSQL("CREATE INDEX dates_dateMonth on " + TABLE_NAME + "(" + Columns.DATE_MONTH.getName() + ");");
            db.execSQL("CREATE INDEX dates_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX dates_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Dates | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Dates | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Dates | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.DATE_DAY.getName()).append(", ")
                    .append(Columns.DATE_MONTH.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.DATE_DAY.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_MONTH.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class DatesMonth extends BudgetContent {

        private static final String LOG_TAG = DatesMonth.class.getSimpleName();

        public static final String TABLE_NAME = "datesmonth";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-datesmonth";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-datesmonth";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            DATE_MONTH("dateMonth", "text"),
            DATE_YEAR("dateYear", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.DATE_MONTH.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.IS_SYNCED.getName()
        };

        private DatesMonth() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesMonth | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
                    + Columns.ID.getName() + " " + Columns.ID.getType() + ", "
                    + Columns.DATE_MONTH.getName() + " " + Columns.DATE_MONTH.getType() + ", "
                    + Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", "
                    + Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX datesMonth_dateMonth on " + TABLE_NAME + "(" + Columns.DATE_MONTH.getName() + ");");
            db.execSQL("CREATE INDEX datesMonth_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX datesMonth_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesMonth | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesMonth | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesMonth | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.DATE_MONTH.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.DATE_MONTH.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class DatesYear extends BudgetContent {

        private static final String LOG_TAG = DatesYear.class.getSimpleName();

        public static final String TABLE_NAME = "datesyear";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-datesyear";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-datesyear";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            DATE_YEAR("dateYear", "text"),
            IS_SYNCED("isSynced", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.DATE_YEAR.getName(),
                Columns.IS_SYNCED.getName()
        };

        private DatesYear() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesYear | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
                    + Columns.ID.getName() + " " + Columns.ID.getType() + ", "
                    + Columns.DATE_YEAR.getName() + " " + Columns.DATE_YEAR.getType() + ", "
                    + Columns.IS_SYNCED.getName() + " " + Columns.IS_SYNCED.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX datesYear_dateYear on " + TABLE_NAME + "(" + Columns.DATE_YEAR.getName() + ");");
            db.execSQL("CREATE INDEX datesYear_isSynced on " + TABLE_NAME + "(" + Columns.IS_SYNCED.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesYear | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesYear | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DatesYear | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.DATE_YEAR.getName()).append(", ")
                    .append(Columns.IS_SYNCED.getName())
                    .append(" ) VALUES (?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.DATE_YEAR.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.IS_SYNCED.getName()));
        }
    }

    /**
     * Created in version 1
     */
    public static final class CurrencyRate extends BudgetContent {

        private static final String LOG_TAG = CurrencyRate.class.getSimpleName();

        public static final String TABLE_NAME = "currencyrate";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/budget-currencyrate";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/budget-currencyrate";

        public static final Uri CONTENT_URI = Uri.parse(BudgetContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            TO_("to_", "text"),
            FROM_("from_", "text"),
            Q("g", "text"),
            V("v", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[]{
                Columns.ID.getName(),
                Columns.TO_.getName(),
                Columns.FROM_.getName(),
                Columns.Q.getName(),
                Columns.V.getName()
        };

        private CurrencyRate() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "CurrencyRate | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
                    + Columns.ID.getName() + " " + Columns.ID.getType() + ", "
                    + Columns.TO_.getName() + " " + Columns.TO_.getType() + ", "
                    + Columns.FROM_.getName() + " " + Columns.FROM_.getType() + ", "
                    + Columns.Q.getName() + " " + Columns.Q.getType() + ", "
                    + Columns.V.getName() + " " + Columns.V.getType() +
                    ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX currencyRate_to_ on " + TABLE_NAME + "(" + Columns.TO_.getName() + ");");
            db.execSQL("CREATE INDEX currencyRate_from_ on " + TABLE_NAME + "(" + Columns.FROM_.getName() + ");");
            db.execSQL("CREATE INDEX currencyRate_q on " + TABLE_NAME + "(" + Columns.Q.getName() + ");");
            db.execSQL("CREATE INDEX currencyRate_v on " + TABLE_NAME + "(" + Columns.V.getName() + ");");
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "CurrencyRate | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "CurrencyRate | upgradeTable start");
            }

            if (oldVersion < newVersion) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (BudgetProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "CurrencyRate | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ")
                    .append(Columns.ID.getName()).append(", ")
                    .append(Columns.TO_.getName()).append(", ")
                    .append(Columns.FROM_.getName()).append(", ")
                    .append(Columns.Q.getName()).append(", ")
                    .append(Columns.V.getName()).append(" ) VALUES (?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.TO_.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FROM_.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.Q.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.V.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}

