package com.syncadapter.provider;

import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

import com.syncadapter.provider.BudgetContent.Category;
import com.syncadapter.provider.BudgetContent.Dates;
import com.syncadapter.provider.BudgetContent.DatesMonth;
import com.syncadapter.provider.BudgetContent.DatesYear;

import java.util.ArrayList;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p/>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public final class BudgetProvider extends BaseProvider {

    private static final String LOG_TAG = BudgetProvider.class.getSimpleName();

    /* package */ static final boolean ACTIVATE_ALL_LOGS = false;

    protected static final String DATABASE_NAME = "BudgetProvider.db";

    public static final String AUTHORITY = "com.syncadapter.provider.BudgetProvider";

    static {
        Uri.parse("content://" + AUTHORITY + "/integrityCheck");
    }

    // Version 1 : Creation of the database
    public static final int DATABASE_VERSION = 1;

    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    private enum UriType {
        DAILY_CATEGORY_ENTRY(BudgetContent.DailyCategoryEntry.TABLE_NAME, BudgetContent.DailyCategoryEntry.TABLE_NAME, BudgetContent.DailyCategoryEntry.TYPE_ELEM_TYPE),
        DAILY_CATEGORY_ENTRY_ID(BudgetContent.DailyCategoryEntry.TABLE_NAME + "/#", BudgetContent.DailyCategoryEntry.TABLE_NAME, BudgetContent.DailyCategoryEntry.TYPE_DIR_TYPE),
        MONTHLY_CATEGORY_ENTRY(BudgetContent.MonthlyCategoryEntry.TABLE_NAME, BudgetContent.MonthlyCategoryEntry.TABLE_NAME, BudgetContent.MonthlyCategoryEntry.TYPE_ELEM_TYPE),
        MONTHLY_CATEGORY_ENTRY_ID(BudgetContent.MonthlyCategoryEntry.TABLE_NAME + "/#", BudgetContent.MonthlyCategoryEntry.TABLE_NAME, BudgetContent.MonthlyCategoryEntry.TYPE_DIR_TYPE),
        YEARLY_CATEGORY_ENTRY(BudgetContent.YearlyCategoryEntry.TABLE_NAME, BudgetContent.YearlyCategoryEntry.TABLE_NAME, BudgetContent.YearlyCategoryEntry.TYPE_ELEM_TYPE),
        YEARLY_CATEGORY_ENTRY_ID(BudgetContent.YearlyCategoryEntry.TABLE_NAME + "/#", BudgetContent.YearlyCategoryEntry.TABLE_NAME, BudgetContent.YearlyCategoryEntry.TYPE_DIR_TYPE),
        DAILY_ENTRY(BudgetContent.DailyEntry.TABLE_NAME, BudgetContent.DailyEntry.TABLE_NAME, BudgetContent.DailyEntry.TYPE_ELEM_TYPE),
        DAILY_ENTRY_ID(BudgetContent.DailyEntry.TABLE_NAME + "/#", BudgetContent.DailyEntry.TABLE_NAME, BudgetContent.DailyEntry.TYPE_DIR_TYPE),
        MONTHLY_ENTRY(BudgetContent.MonthlyEntry.TABLE_NAME, BudgetContent.MonthlyEntry.TABLE_NAME, BudgetContent.MonthlyEntry.TYPE_ELEM_TYPE),
        MONTHLY_ENTRY_ID(BudgetContent.MonthlyEntry.TABLE_NAME + "/#", BudgetContent.MonthlyEntry.TABLE_NAME, BudgetContent.MonthlyEntry.TYPE_DIR_TYPE),
        YEARLY_ENTRY(BudgetContent.YearlyEntry.TABLE_NAME, BudgetContent.YearlyEntry.TABLE_NAME, BudgetContent.YearlyEntry.TYPE_ELEM_TYPE),
        YEARLY_ENTRY_ID(BudgetContent.YearlyEntry.TABLE_NAME + "/#", BudgetContent.YearlyEntry.TABLE_NAME, BudgetContent.YearlyEntry.TYPE_DIR_TYPE),
        CATEGORY(Category.TABLE_NAME, Category.TABLE_NAME, Category.TYPE_ELEM_TYPE),
        CATEGORY_ID(Category.TABLE_NAME + "/#", Category.TABLE_NAME, Category.TYPE_DIR_TYPE),
        DATES(Dates.TABLE_NAME, Dates.TABLE_NAME, Dates.TYPE_ELEM_TYPE),
        DATES_ID(Dates.TABLE_NAME + "/#", Dates.TABLE_NAME, Dates.TYPE_DIR_TYPE),
        DATES_MONTH(DatesMonth.TABLE_NAME, DatesMonth.TABLE_NAME, DatesMonth.TYPE_ELEM_TYPE),
        DATES_MONTH_ID(DatesMonth.TABLE_NAME + "/#", DatesMonth.TABLE_NAME, DatesMonth.TYPE_DIR_TYPE),
        DATES_YEAR(DatesYear.TABLE_NAME, DatesYear.TABLE_NAME, DatesYear.TYPE_ELEM_TYPE),
        DATES_YEAR_ID(DatesYear.TABLE_NAME + "/#", DatesYear.TABLE_NAME, DatesYear.TYPE_DIR_TYPE),
        CURRENCY_RATE(BudgetContent.CurrencyRate.TABLE_NAME, BudgetContent.CurrencyRate.TABLE_NAME, BudgetContent.CurrencyRate.TYPE_ELEM_TYPE),
        CURRENCY_RATE_ID(BudgetContent.CurrencyRate.TABLE_NAME + "/#", BudgetContent.CurrencyRate.TABLE_NAME, BudgetContent.CurrencyRate.TYPE_DIR_TYPE);

        private String mTableName;
        private String mType;

        UriType(String matchPath, String tableName, String type) {
            mTableName = tableName;
            mType = type;
            sUriMatcher.addURI(AUTHORITY, matchPath, ordinal());
        }

        String getTableName() {
            return mTableName;
        }

        String getType() {
            return mType;
        }
    }

    static {
        // Ensures UriType is initialized
        UriType.values();
    }

    private static UriType matchUri(Uri uri) {
        int match = sUriMatcher.match(uri);
        if (match < 0) {
            throw new IllegalArgumentException("Unknown URI " + uri);
        }
        return UriType.class.getEnumConstants()[match];
    }

    private SQLiteDatabase mDatabase;

    @SuppressWarnings("deprecation")
    public synchronized SQLiteDatabase getDatabase(Context context) {
        // Always return the cached database, if we've got one
        if (mDatabase == null || !mDatabase.isOpen()) {
            DatabaseHelper helper = new DatabaseHelper(context, DATABASE_NAME);
            mDatabase = helper.getWritableDatabase();
            if (mDatabase != null) {
                mDatabase.setLockingEnabled(true);
            }
        }

        return mDatabase;
    }

    private class DatabaseHelper extends SQLiteOpenHelper {

        DatabaseHelper(Context context, String name) {
            super(context, name, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.d(LOG_TAG, "Creating BudgetProvider database");

            // Create all tables here; each class has its own method
            BudgetContent.DailyCategoryEntry.createTable(db);
            BudgetContent.MonthlyCategoryEntry.createTable(db);
            BudgetContent.YearlyCategoryEntry.createTable(db);
            BudgetContent.DailyEntry.createTable(db);
            BudgetContent.MonthlyEntry.createTable(db);
            BudgetContent.YearlyEntry.createTable(db);
            Category.createTable(db);
            Dates.createTable(db);
            DatesMonth.createTable(db);
            DatesYear.createTable(db);
            BudgetContent.CurrencyRate.createTable(db);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

            // Upgrade all tables here; each class has its own method
            BudgetContent.DailyCategoryEntry.upgradeTable(db, oldVersion, newVersion);
            BudgetContent.MonthlyCategoryEntry.upgradeTable(db, oldVersion, newVersion);
            BudgetContent.YearlyCategoryEntry.upgradeTable(db, oldVersion, newVersion);
            BudgetContent.DailyEntry.upgradeTable(db, oldVersion, newVersion);
            BudgetContent.MonthlyEntry.upgradeTable(db, oldVersion, newVersion);
            BudgetContent.YearlyEntry.upgradeTable(db, oldVersion, newVersion);
            Category.upgradeTable(db, oldVersion, newVersion);
            Dates.upgradeTable(db, oldVersion, newVersion);
            DatesMonth.upgradeTable(db, oldVersion, newVersion);
            DatesYear.upgradeTable(db, oldVersion, newVersion);
            BudgetContent.CurrencyRate.upgradeTable(db, oldVersion, newVersion);
        }

        @Override
        public void onOpen(SQLiteDatabase db) {
        }
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);
        String id;

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "delete: uri=" + uri + ", match is " + uriType.name());
        }

        int result = -1;

        switch (uriType) {
            case DAILY_CATEGORY_ENTRY_ID:
            case MONTHLY_CATEGORY_ENTRY_ID:
            case YEARLY_CATEGORY_ENTRY_ID:
            case DAILY_ENTRY_ID:
            case MONTHLY_ENTRY_ID:
            case YEARLY_ENTRY_ID:
            case CATEGORY_ID:
            case DATES_ID:
            case DATES_MONTH_ID:
            case DATES_YEAR_ID:
            case CURRENCY_RATE_ID:
                id = uri.getPathSegments().get(1);
                result = db.delete(uriType.getTableName(), whereWithId(selection),
                        addIdToSelectionArgs(id, selectionArgs));
                break;
            case DAILY_CATEGORY_ENTRY:
            case MONTHLY_CATEGORY_ENTRY:
            case YEARLY_CATEGORY_ENTRY:
            case DAILY_ENTRY:
            case MONTHLY_ENTRY:
            case YEARLY_ENTRY:
            case CATEGORY:
            case DATES:
            case DATES_MONTH:
            case DATES_YEAR:
            case CURRENCY_RATE:
                result = db.delete(uriType.getTableName(), selection, selectionArgs);
                break;
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return result;
    }

    @Override
    public String getType(Uri uri) {
        return matchUri(uri).getType();
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);
        long id;

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "insert: uri=" + uri + ", match is " + uriType.name());
        }

        Uri resultUri;

        switch (uriType) {
            case DAILY_CATEGORY_ENTRY:
            case MONTHLY_CATEGORY_ENTRY:
            case YEARLY_CATEGORY_ENTRY:
            case DAILY_ENTRY:
            case MONTHLY_ENTRY:
            case YEARLY_ENTRY:
            case CATEGORY:
            case DATES:
            case DATES_MONTH:
            case DATES_YEAR:
            case CURRENCY_RATE:
                id = db.insert(uriType.getTableName(), "foo", values);
                resultUri = id == -1 ? null : ContentUris.withAppendedId(uri, id);
                break;
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }

        // Notify with the base uri, not the new uri (nobody is watching a new
        // record)
        getContext().getContentResolver().notifyChange(uri, null);
        return resultUri;
    }

    @Override
    public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations)
            throws OperationApplicationException {
        SQLiteDatabase db = getDatabase(getContext());
        db.beginTransaction();
        try {
            int numOperations = operations.size();
            ContentProviderResult[] results = new ContentProviderResult[numOperations];
            for (int i = 0; i < numOperations; i++) {
                results[i] = operations.get(i).apply(this, results, i);
                db.yieldIfContendedSafely();
            }
            db.setTransactionSuccessful();
            return results;
        } finally {
            db.endTransaction();
        }
    }

    @Override
    public int bulkInsert(Uri uri, ContentValues[] values) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "bulkInsert: uri=" + uri + ", match is " + uriType.name());
        }

        int numberInserted = 0;
        SQLiteStatement insertStmt;

        db.beginTransaction();
        try {
            switch (uriType) {
                case DAILY_CATEGORY_ENTRY:
                    insertStmt = db.compileStatement(BudgetContent.DailyCategoryEntry.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.DailyCategoryEntry.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;

                case MONTHLY_CATEGORY_ENTRY:
                    insertStmt = db.compileStatement(BudgetContent.MonthlyCategoryEntry.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.MonthlyCategoryEntry.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;

                case YEARLY_CATEGORY_ENTRY:
                    insertStmt = db.compileStatement(BudgetContent.YearlyCategoryEntry.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.YearlyCategoryEntry.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;
                case DAILY_ENTRY:
                    insertStmt = db.compileStatement(BudgetContent.DailyEntry.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.DailyEntry.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;

                case MONTHLY_ENTRY:
                    insertStmt = db.compileStatement(BudgetContent.MonthlyEntry.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.MonthlyEntry.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;

                case YEARLY_ENTRY:
                    insertStmt = db.compileStatement(BudgetContent.YearlyEntry.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.YearlyEntry.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;

                case CATEGORY:
                    insertStmt = db.compileStatement(Category.getBulkInsertString());
                    for (ContentValues value : values) {
                        Category.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;
                case DATES:
                    insertStmt = db.compileStatement(Dates.getBulkInsertString());
                    for (ContentValues value : values) {
                        Dates.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;
                case DATES_MONTH:
                    insertStmt = db.compileStatement(DatesMonth.getBulkInsertString());
                    for (ContentValues value : values) {
                        DatesMonth.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;
                case DATES_YEAR:
                    insertStmt = db.compileStatement(DatesYear.getBulkInsertString());
                    for (ContentValues value : values) {
                        DatesYear.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;
                case CURRENCY_RATE:
                    insertStmt = db.compileStatement(BudgetContent.CurrencyRate.getBulkInsertString());
                    for (ContentValues value : values) {
                        BudgetContent.CurrencyRate.bindValuesInBulkInsert(insertStmt, value);
                        insertStmt.execute();
                        insertStmt.clearBindings();
                    }
                    insertStmt.close();
                    db.setTransactionSuccessful();
                    numberInserted = values.length;

                    if (ACTIVATE_ALL_LOGS) {
                        Log.d(LOG_TAG, "bulkInsert: uri=" + uri + " | nb inserts : " + numberInserted);
                    }
                    break;

                default:
                    throw new IllegalArgumentException("Unknown URI " + uri);
            }
        } finally {
            db.endTransaction();
        }

        // Notify with the base uri, not the new uri (nobody is watching a new
        // record)
        context.getContentResolver().notifyChange(uri, null);
        return numberInserted;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
                        String sortOrder) {

        Cursor c = null;
        UriType uriType = matchUri(uri);
        Context context = getContext();
        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);
        String id;

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "query: uri=" + uri + ", match is " + uriType.name());
        }

        switch (uriType) {
            case DAILY_CATEGORY_ENTRY_ID:
            case MONTHLY_CATEGORY_ENTRY_ID:
            case YEARLY_CATEGORY_ENTRY_ID:
            case DAILY_ENTRY_ID:
            case MONTHLY_ENTRY_ID:
            case YEARLY_ENTRY_ID:
            case CATEGORY_ID:
            case DATES_ID:
            case DATES_MONTH_ID:
            case DATES_YEAR_ID:
            case CURRENCY_RATE_ID:
                id = uri.getPathSegments().get(1);
                c = db.query(uriType.getTableName(), projection, whereWithId(selection),
                        addIdToSelectionArgs(id, selectionArgs), null, null, sortOrder);
                break;
            case DAILY_CATEGORY_ENTRY:
            case MONTHLY_CATEGORY_ENTRY:
            case YEARLY_CATEGORY_ENTRY:
            case DAILY_ENTRY:
            case MONTHLY_ENTRY:
            case YEARLY_ENTRY:
            case CATEGORY:
            case DATES:
            case DATES_MONTH:
            case DATES_YEAR:
            case CURRENCY_RATE:
                c = db.query(uriType.getTableName(), projection, selection, selectionArgs,
                        null, null, sortOrder);
                break;
        }

        if ((c != null) && !isTemporary()) {
            Log.d("ContentProvider::SyncAdapter", "c.setNotificationUri()");
            c.setNotificationUri(getContext().getContentResolver(), uri);
        }
        if (uriType == UriType.CURRENCY_RATE || uriType == UriType.CURRENCY_RATE_ID) {
            if ((c != null) && (c.getCount() == 0)) {
                refreshCurrencyRates();
            }
        }
        return c;
    }

    private String whereWithId(String selection) {
        StringBuilder sb = new StringBuilder(256);
        sb.append(BaseColumns._ID);
        sb.append(" = ?");
        if (selection != null) {
            sb.append(" AND (");
            sb.append(selection);
            sb.append(')');
        }
        return sb.toString();
    }

    private String[] addIdToSelectionArgs(String id, String[] selectionArgs) {

        if (selectionArgs == null) {
            return new String[]{id};
        }

        int length = selectionArgs.length;
        String[] newSelectionArgs = new String[length + 1];
        newSelectionArgs[0] = id;
        System.arraycopy(selectionArgs, 0, newSelectionArgs, 1, length);
        return newSelectionArgs;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {

        UriType uriType = matchUri(uri);
        Context context = getContext();

        // Pick the correct database for this operation
        SQLiteDatabase db = getDatabase(context);

        if (ACTIVATE_ALL_LOGS) {
            Log.d(LOG_TAG, "update: uri=" + uri + ", match is " + uriType.name());
        }

        int result = -1;

        switch (uriType) {
            case DAILY_CATEGORY_ENTRY_ID:
            case MONTHLY_CATEGORY_ENTRY_ID:
            case YEARLY_CATEGORY_ENTRY_ID:
            case DAILY_ENTRY_ID:
            case MONTHLY_ENTRY_ID:
            case YEARLY_ENTRY_ID:
            case CATEGORY_ID:
            case DATES_ID:
            case DATES_MONTH_ID:
            case DATES_YEAR_ID:
            case CURRENCY_RATE_ID:
                String id = uri.getPathSegments().get(1);
                result = db.update(uriType.getTableName(), values, whereWithId(selection),
                        addIdToSelectionArgs(id, selectionArgs));
                break;
            case DAILY_CATEGORY_ENTRY:
            case MONTHLY_CATEGORY_ENTRY:
            case YEARLY_CATEGORY_ENTRY:
            case DAILY_ENTRY:
            case MONTHLY_ENTRY:
            case YEARLY_ENTRY:
            case CATEGORY:
            case DATES:
            case DATES_MONTH:
            case DATES_YEAR:
            case CURRENCY_RATE:
                result = db.update(uriType.getTableName(), values, selection, selectionArgs);
                break;
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return result;
    }

    @Override
    public boolean onCreate() {
        return true;
    }
}
